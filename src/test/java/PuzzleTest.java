
import static org.junit.Assert.assertTrue;
import org.junit.Test;

public class PuzzleTest{

    private boolean testSolution(int[][] arr) {
        ISudokuSolver s = new SudokuSolver();
		s.setup(3);
        s.readInPuzzle(arr);

        return s.solve();
    }

    @Test
    public void GoodPuzzle() {
        int[][] multi = new int[][]{
		  { 8, 1, 2, 9, 7, 4, 3, 6, 5 },
		  { 9, 3, 4, 6, 5, 1, 7, 8, 2 },
		  { 7, 6, 5, 8, 2, 3, 9, 4, 1 },
		  { 5, 7, 1, 4, 8, 2, 6, 9, 3 },
		  { 2, 8, 9, 3, 6, 5, 4, 1, 7 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 8 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 4 },
		  { 3, 2, 8, 1, 4, 6, 5, 7, 9 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 6 }
		};

        assertTrue(testSolution(multi));
    }
    @Test
    public void BadPuzzle() {
        int[][] multi = new int[][]{
		  { 2, 1, 2, 9, 7, 4, 3, 6, 5 },
		  { 9, 3, 4, 6, 5, 1, 7, 8, 2 },
		  { 7, 6, 5, 8, 2, 3, 9, 4, 1 },
		  { 5, 7, 1, 4, 8, 2, 6, 9, 3 },
		  { 2, 8, 9, 3, 6, 5, 4, 1, 7 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 8 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 4 },
		  { 3, 2, 8, 1, 4, 6, 5, 7, 9 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 6 }
		};

        assertTrue(! testSolution(multi)); // false test
    }

    @Test
    public void VariousGoodPuzzle() {
        int[][] multi1 = new int[][]{
		  { 0, 1, 2, 9, 7, 4, 3, 6, 5 },
		  { 9, 3, 4, 6, 5, 1, 7, 8, 2 },
		  { 7, 6, 5, 8, 2, 3, 0, 4, 1 },
		  { 5, 7, 0, 4, 0, 2, 6, 9, 3 },
		  { 2, 8, 9, 0, 6, 5, 4, 1, 7 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 8 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 4 },
		  { 3, 2, 8, 1, 4, 6, 5, 0, 9 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 6 }
		};

        int[][] multi2 = new int[][]{
		  { 0, 1, 2, 9, 7, 4, 3, 6, 5 },
		  { 9, 3, 4, 6, 5, 1, 7, 8, 2 },
		  { 7, 6, 5, 8, 2, 3, 0, 4, 1 },
		  { 5, 7, 0, 4, 0, 2, 6, 9, 3 },
		  { 2, 8, 9, 0, 6, 5, 4, 1, 7 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 8 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 4 },
		  { 3, 2, 8, 1, 4, 6, 5, 0, 9 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 6 }
		};
        int[][] multi3 = new int[][]{
		  { 0, 1, 2, 9, 7, 0, 3, 6, 5 },
		  { 9, 3, 4, 6, 5, 0, 7, 8, 2 },
		  { 7, 6, 5, 8, 2, 0, 0, 4, 1 },
		  { 5, 7, 0, 4, 0, 2, 6, 9, 3 },
		  { 2, 8, 9, 0, 6, 5, 4, 1, 7 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 8 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 4 },
		  { 3, 2, 8, 1, 4, 6, 5, 0, 9 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 6 }
		};
        int[][] multi4 = new int[][]{
		  { 0, 1, 2, 9, 7, 0, 3, 6, 0 },
		  { 9, 3, 4, 6, 5, 0, 7, 8, 0 },
		  { 7, 6, 5, 8, 2, 0, 0, 4, 0 },
		  { 5, 7, 0, 4, 0, 2, 6, 9, 0 },
		  { 2, 8, 9, 0, 6, 5, 4, 1, 0 },
		  { 6, 4, 3, 7, 1, 9, 2, 5, 0 },
		  { 1, 9, 6, 5, 3, 7, 8, 2, 0 },
		  { 3, 2, 8, 1, 4, 6, 5, 0, 0 },
		  { 4, 5, 7, 2, 9, 8, 1, 3, 0 }
		};

        assertTrue(testSolution(multi1));
        assertTrue(testSolution(multi2));
        assertTrue(testSolution(multi3));
        assertTrue(testSolution(multi4));
    }

    @Test
    public void OnlinePuzzle2() {
        int[][] multi = new int[][]{
          { 2,0,0 , 8,0,4 , 0,0,6 },
          { 0,0,6 , 0,0,0 , 5,0,0 },
          { 0,7,4 , 0,0,0 , 9,2,0 },
          { 3,0,0 , 0,4,0 , 0,0,7 },
          { 0,0,0 , 3,0,5 , 0,0,0 },
          { 4,0,0 , 0,6,0 , 0,0,9 },
          { 0,1,9 , 0,0,0 , 7,4,0 },
          { 0,0,8 , 0,0,0 , 2,0,0 },
          { 5,0,0 , 6,0,8 , 0,0,1 }
        };

        assertTrue(testSolution(multi));
    }

    @Test
    public void OnlinePuzzle1Easy() {
        int[][] multi = new int[][]{
		  { 5,3,0 , 0,7,0 , 0,0,0 },
		  { 6,0,0 , 1,9,5 , 0,0,0 },
		  { 0,9,8 , 0,0,0 , 0,6,0 },
		  { 8,0,0 , 0,6,0 , 0,0,3 },
		  { 4,0,0 , 8,0,3 , 0,0,1 },
		  { 7,0,0 , 0,2,0 , 0,0,6 },
		  { 0,6,0 , 0,0,0 , 2,8,0 },
		  { 0,0,0 , 4,1,9 , 0,0,5 },
		  { 0,0,0 , 0,8,0 , 0,7,9 }
		};

        assertTrue(testSolution(multi));
    }

    // TOO HARD
    // @Test
    // public void OnlinePuzzle3Hard() {
    //     int[][] multi = new int[][]{
    //         { 0,0,0 , 0,0,0 , 0,0,0 },
    //         { 0,0,0 , 0,0,3 , 0,0,0 },
    //         { 0,0,1 , 0,2,0 , 0,0,0 },
    //         { 0,0,0 , 5,0,7 , 0,0,0 },
    //         { 0,0,4 , 0,0,0 , 1,0,0 },
    //         { 0,9,0 , 0,0,0 , 0,0,0 },
    //         { 5,0,0 , 0,0,0 , 0,7,3 },
    //         { 0,0,2 , 0,1,0 , 0,0,0 },
	// 	    { 0,0,0 , 0,4,0 , 0,0,9 }
	// 	};
    //
    //     assertTrue(testSolution(multi));
    // }

    @Test
    public void OnlinePuzzle4Medium() {
        int[][] multi = new int[][]{
            { 0,0,2 , 0,0,0 , 0,0,0 },
            { 0,0,3 , 0,1,0 , 0,0,6 },
            { 0,4,0 , 0,2,0 , 0,3,0 },
            { 1,0,0 , 0,0,3 , 0,0,9 },
            { 0,0,5 , 0,0,0 , 4,0,0 },
            { 2,0,0 , 6,0,0 , 0,0,8 },
            { 0,9,0 , 0,7,0 , 0,4,0 },
            { 7,0,0 , 0,8,0 , 5,0,0 },
            { 0,0,0 , 0,0,0 , 3,0,0 }
        };

        assertTrue(testSolution(multi));
    }

    @Test
    public void OnlinePuzzle5Medium() {
        int[][] multi = new int[][]{
            { 8,9,2 , 0,0,3 , 0,1,4 },
            { 0,0,0 , 0,0,0 , 0,0,0 },
            { 0,0,0 , 0,6,8 , 0,7,0 },
            { 4,5,0 , 0,8,0 , 0,0,1 },
            { 0,0,8 , 0,0,0 , 2,0,0 },
            { 1,0,3 , 7,0,0 , 5,0,0 },
            { 0,7,1 , 0,0,6 , 0,5,0 },
            { 5,0,9 , 2,0,0 , 0,8,0 },
            { 6,0,0 , 0,0,7 , 0,0,9 },
        };

        assertTrue(testSolution(multi));
    }


}
